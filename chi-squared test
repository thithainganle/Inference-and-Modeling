############CHI-SQUARED TEST
# compute overall funding rate
funding_rate <- totals %>%
  summarize(percent_total = (yes_men + yes_women) / (yes_men + no_men + yes_women + no_women)) %>%
  .$percent_total
funding_rate

# construct two-by-two table for observed data
two_by_two <- tibble(awarded = c("no", "yes"),
                     men = c(totals$no_men, totals$yes_men),
                     women = c(totals$no_women, totals$yes_women))
two_by_two

# compute null hypothesis two-by-two table
tibble(awarded = c("no", "yes"),
       men = (totals$no_men + totals$yes_men) * c(1-funding_rate, funding_rate),
       women = (totals$no_women + totals$yes_women) * c(1-funding_rate, funding_rate))

# chi-squared test
chisq_test <- two_by_two %>%
  select(-awarded) %>%
  nbsp;   chisq.test()
chisq_test$p.value
#Code: Odds ratio
# odds of getting funding for men
odds_men <- (two_by_two$men[2] / sum(two_by_two$men)) /
  (two_by_two$men[1] / sum(two_by_two$men))

# odds of getting funding for women
odds_women <- (two_by_two$women[2] / sum(two_by_two$women)) /
  (two_by_two$women[1] / sum(two_by_two$women))

# odds ratio - how many times larger odds are for men than women
odds_men/odds_women
Code: p-value and odds ratio responses to increasing sample size
# multiplying all observations by 10 decreases p-value without changing odds ratio
two_by_two %>%
  select(-awarded) %>%
  mutate(men = men*10, women = women*10) %>%
  chisq.test()

# Generate a logical vector 'res' that contains the results of the simulations using the t-distribution
res <- replicate(B,{
  X <- sample(x,N, replace =TRUE)
  interval <- c(mean(X) - qt(.975, N-1)*sd(X)/sqrt(N), mean(X) + qt(.975,N-1)*sd(X)/sqrt(N))
  between(mu, interval[1], interval[2])
})


# Calculate the proportion of times the simulation produced values within the 95% confidence interval. Print this value to the console.
mean(res)


###########Chi-squared test
# The 'totals' data have already been loaded. Examine them using the `head` function.
head(totals)

# Perform a chi-squared test on the hit data. Save the results as an object called 'chisq_test'.
chisq_test <- totals %>% select(-hit) %>% chisq.test()
chisq_test


# Print the p-value of the chi-squared test to the console
chisq_test$p.value

#################
# The 'totals' data have already been loaded. Examine them using the `head` function.
head(totals)

# Generate a variable called `odds_C` that contains the odds of getting the prediction right for grade C- polls
odds_C <- (totals[[2,2]] / sum(totals[[2]])) / 
  (totals[[1,2]] / sum(totals[[2]]))


# Generate a variable called `odds_A` that contains the odds of getting the prediction right for grade A- polls

odds_A <- (totals[[2,3]] / sum(totals[[3]])) /   (totals[[1,3]] / sum(totals[[3]]))

# Calculate the odds ratio to determine how many times larger the odds ratio is for grade A- polls than grade C- polls
odds_A/odds_C


###BREXIT POLL ANALYSIS
install.packages("dslabs")
library(dslabs)
options(digits =3)
head(brexit_polls)
df <- brexit_polls

p<- 0.481
d <- 2*p -1
N <- 1500
p*N
sqrt(p*(1-p)/N)
avg<- mean(df$remain)
se <-sd(df$remain)/sqrt(N)
mean(df$spread)
2*avg-1
2*se
